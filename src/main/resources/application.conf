###################################################
# Adapted from KillrWeather Reference Config File #
###################################################

spark {
  # The Spark master host. Set first by environment if exists. Then system, then config.
  # Options: spark://host1:port1,host2:port2
  # - "local" to run locally with one thread,
  # - local[4]" to run locally with 4 cores
  # - the master IP/hostname to run on a Spark standalone cluster
  # - if not set, defaults to "local[*]" to run with enough threads
  # Supports optional HA failover for more than one: host1,host2..
  # which is used to inform: spark://host1:port1,host2:port2
  master = "local[2]"
  master = ${?SPARK_MASTER}
  # Memory ceiling for Spark Executors
  executor.memory=256m
  # Number of concurrent cores to use
  parallelism=2
  # The batch interval must be set based on the latency requirements
  # of your application and available cluster resources.
  streaming.batch.interval = 2000

  cleaner.ttl.seconds = 600
}

rabbitmq {
  host = "localhost"
  host = ${?RMQ_HOST}
  username  = "guest"
  password  = "guest"
  queuename = "myqueue"
  exchange  = "amq.direct"
}


# Undefined values are expected to be set by the user in their application.conf file
# Defined values are defaults which can be overridden by the user in their application.conf file
# We first check for a setting in the environment deployed to, then whether a java system property
# exists to use, and finally the configured one. The users configured values would override
# any configured setting in this file.
# For environment keys, set the key name noted, for instance: ${?CASSANDRA_KEYSPACE}, your
# environment should be CASSANDRA_KEYSPACE="my_keyspace" or CASSANDRA_RPC_PORT=9161
cassandra {

  # The contact point to connect to the Cassandra cluster.
  # Accepts a comma-separated string of hosts. Override with -Dcassandra.connection.host.
  connection.host = "localhost"
  connection.host = ${CASSANDRA_HOST}
  keyspace.name = "msgs"
  rawtable.name = "msg_audit"

}

akka {
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}


